parameters:
- name: devopsEnvironment
  type: string
  default: data-unitycatalog-dev
  values:
  - data-unitycatalog-dev
  - data-unitycatalog-prod
- name: environmentName
  type: string
- name: environmentType
  type: string
  default: DevTest
  values:
  - DevTest
  - Production
- name: subscription
  type: string
- name: azureRegion
  type: string

jobs:
  # track deployments on the environment
  - deployment: 'deploy_unitycatalog'
    displayName: 'Deploy'

    pool:
      vmImage: 'ubuntu-latest'

    # creates an environment if it doesn't exist
    environment: '${{ parameters.devopsEnvironment }}'
    strategy:
      # Only supported deployment strategy when not deploying to Kubernetes or Azure VM's
      runOnce:
        # Used to run steps that deploy your application.
        deploy:
          
          steps:

            - task: TerraformInstaller@1
              displayName: Install Terraform 1.7.3
              inputs:
                terraformVersion: 1.7.3

            - checkout: self
              displayName: 'Checkout repository'

            - task: TerraformTaskV4@4
              displayName: Initialize Terraform
              inputs:
                backendType: azurerm
                command: 'init'
                workingDirectory: './terraform1'
                backendServiceArm: '${{ parameters.subscription }}'
                backendAzureRmResourceGroupName: 'terraform-test-she'
                backendAzureRmStorageAccountName: 'tfstatetestingshe'
                backendAzureRmContainerName: 'tfstate-test1'
                backendAzureRmKey: 'state.tfstate'

            - task: TerraformTaskV4@4
              displayName:  Terraform plan
              inputs:
                backendType: azurerm
                command: 'plan'
                workingDirectory: './terraform1'
                environmentServiceNameAzureRM: '${{ parameters.subscription }}'
            
            - task: TerraformTaskV4@4
              displayName:  Terraform apply
              inputs:
                backendType: azurerm
                command: 'apply'
                workingDirectory: './terraform1'
                environmentServiceNameAzureRM: '${{ parameters.subscription }}'
